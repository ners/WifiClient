#pragma once

#include <QList>
#include <QMap>
#include <QObject>
#include <WifiClient/server/config.h>
#include <WifiClient/server/networkstatus.h>
#include <WifiClient/server/simulator.h>
#include <optional>

namespace WifiClient::Server
{

/** @class Server
 *  @brief Responsible for network events
 *  The Server class owns the network configuration, as well as the simulators for all the
 * networks described in the configuration. It broadcasts network events for each of its known
 * networks.
 */
class Server : public QObject
{
	Q_OBJECT

public:
	/** @brief Reads the config file and creates simulators for each network.
	 *  @param configFileName The path to the JSON configuration file
	 */
	Server(QString const& configFileName, QObject* parent);
	/** @brief Validate the given combination of SSID and password against the configuration
	 *  This method attempts to find a network with the given SSID in the configuration. If one
	 * exists, it then hashes the password and compares it to the password in the
	 * configuration. If both match, the result is success.
	 *  @param ssid Network SSID
	 *  @param password Plain-text password
	 *  @return The status of the network if validation succeeded
	 */
	[[nodiscard]] auto tryAuth(QString const& ssid, QString const& password) const
		-> std::optional<NetworkStatus>;

signals:
	/** @brief An updated status for a network as generated by its simulator
	 */
	void foundNetwork(NetworkStatus);

private:
	Config configuration;
	QMap<QString, Config::WifiConfig::WifiNetwork const*> networkConfig;
	QMap<QString, NetworkStatus> networkStatus;

private slots:
	/** @brief Updates the stored network status for this network and broadcasts an update
	 */
	void updateNetwork(NetworkStatus const& network);
};

} // namespace WifiClient::Server
